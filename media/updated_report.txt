@action(detail=False, methods=['post'])
    def generate_filter_table(self, request, *args, **kwargs):
        selected_fields = request.POST.getlist('selected_fields')
        report_id = request.POST.get('report_id')

        # Fetch report data based on report_id
        report = Report.objects.get(id=report_id)
        report_file_path = os.path.join(settings.MEDIA_ROOT, report.report_data.name)  # Assuming report_data is a FileField
        with open(report_file_path, 'r') as file:
            report_content = file.read()  # Read content of the report file

        # Parse HTML content using BeautifulSoup
        soup = BeautifulSoup(report_content, 'html.parser')

        # Extract table headers (column names)
        table_headers = [th.text.strip() for th in soup.find_all('th')]

        # Extract all rows of data
        rows = soup.find_all('tr')[1:]  # Exclude header row

        # Extract data from rows
        extracted_data = []
        for row in rows:
            cells = row.find_all('td')
            row_data = {table_headers[i]: cells[i].text.strip() for i in range(len(table_headers))}
            extracted_data.append(row_data)

        # If no fields are selected for filtration, default to all existing fields in the report
        if not selected_fields:
            selected_fields = table_headers  # Default to all table headers

        # Fetch employees data
        filterset = EmpMasterFilter(request.GET, queryset=emp_master.objects.all())
        if filterset.is_valid():
            employees = filterset.qs

            # Define display names for fields
            column_headings = {
                "emp_code": "Employee Code",
                "emp_first_name": "First Name",
                "emp_last_name": "Last Name",
                "emp_gender": "Gender",
                "emp_date_of_birth": "Date of Birth",
                "emp_personal_email": "Email",
                "emp_mobile_number_1": "Mobile Number",
                "emp_mobile_number_2": "Mobile Number2",
                "emp_country_id": "Country",
                "emp_state_id": "State",
                "emp_city": "City",
                "emp_permenent_address": "Permanent Address",
                "emp_present_address": "Present Address",
                "emp_status": "Status",
                "emp_hired_date": "Hired Date",
                "emp_active_date": "Active Date",
                "emp_relegion": "Religion",
                "emp_blood_group": "Blood Group",
                "emp_nationality_id": "Nationality",
                "emp_marital_status": "Marital Status",
                "emp_father_name": "Father Name",
                "emp_mother_name": "Mother Name",
                "emp_posting_location": "Posting Location",
                "is_active": "Active",
                "epm_ot_applicable": "OT Applicable",
                "emp_company_id": "Company",
                "emp_branch_id": "Branch",
                "emp_dept_id": "Department",
                "emp_desgntn_id": "Designation",
                "emp_ctgry_id": "Category",
            }

            # Generate HTML table with selected fields and their values for each employee
            html_table = "<table style='border-collapse: collapse; border: 1px solid black;'>"
            html_table += "<thead><tr style='border: 1px solid black;'>"
            for field in selected_fields:
                heading = column_headings.get(field, field)
                html_table += f"<th style='border: 1px solid black; padding: 8px;'>{heading}</th>"
            html_table += "</tr><tr style='border: 1px solid black;'>"
            for field in selected_fields:
                html_table += f"<td style='border: 1px solid black; padding: 8px;'><input type='text' name='{field}'></td>"
            html_table += "</tr></thead><tbody>"

            for employee in employees:
                html_table += "<tr style='border: 1px solid black;'>"
                for field in selected_fields:
                    if field in column_headings:
                        value = getattr(employee, field, 'N/A')
                        html_table += f"<td style='border: 1px solid black; padding: 8px;'>{value}</td>"
                    else:
                        # Find value in extracted data if it exists
                        value = next((data[field] for data in extracted_data if data.get('Employee Code') == getattr(employee, 'emp_code')), 'N/A')
                        html_table += f"<td style='border: 1px solid black; padding: 8px;'>{value}</td>"
                html_table += "</tr>"

            html_table += "</tbody></table>"
        else:
            # Handle invalid filterset
            html_table = "<p>Error generating report.</p>"

        # Pass selected_fields, report_content, and other data to the template
        return render(request, 'filter_table.html', {
            'selected_fields': selected_fields,
            'report_id': report_id,
            'report_content': report_content,  # Pass report_content to the template
            'html_table': html_table  # Pass generated HTML table to the template
        })
  
        
    @action(detail=False, methods=['post'])
    @csrf_exempt
    def filter_existing_report(self, request, *args, **kwargs):
        report_id = request.POST.get('report_id')
        if not report_id:
            return render(request, 'select_filter.html', {'errors': 'Report ID is missing'})
        try:
            report_instance = Report.objects.get(id=report_id)
        except Report.DoesNotExist:
            return render(request, 'select_filter.html', {'errors': 'Report not found'})
        
        selected_fields = request.POST.keys()
        filter_criteria = {field: request.POST.get(field) for field in selected_fields if field != 'report_id'}
        
        # Read and decode the existing report data
        report_data = report_instance.report_data.read().decode('utf-8')
        soup = BeautifulSoup(report_data, 'html.parser')
        table = soup.find('table')  # Find the table element
        if not table:
            return render(request, 'report.html', {'report_data': 'No table found in the report data'})
        
        header_row = table.find('tr')
        column_headings = [th.get_text(strip=True) for th in header_row.find_all('th')]
        
        field_names = {
            "Employee Code": "emp_code",
            "First Name": "emp_first_name",
            "Last Name": "emp_last_name",
            "Gender": "emp_gender",
            "Date of Birth": "emp_date_of_birth",
            "Email": "emp_personal_email",
            "Mobile Number": "emp_mobile_number_1",
            "Mobile Number2": "emp_mobile_number_2",
            "Country": "emp_country_id",
            "State": "emp_state_id",
            "City": "emp_city",
            "Permanent Address": "emp_permenent_address",
            "Present Address": "emp_present_address",
            "Status": "emp_status",
            "Hired Date": "emp_hired_date",
            "Active Date": "emp_active_date",
            "Religion": "emp_relegion",
            "Blood Group": "emp_blood_group",
            "Nationality": "emp_nationality_id",
            "Marital Status": "emp_marital_status",
            "Father Name": "emp_father_name",
            "Mother Name": "emp_mother_name",
            "Posting Location": "emp_posting_location",
            "Active": "is_active",
            "OT Applicable": "epm_ot_applicable",
            "Company": "emp_company_id",
            "Branch": "emp_branch_id",
            "Department": "emp_dept_id",
            "Designation": "emp_desgntn_id",
            "Category": "emp_ctgry_id",
        }
        
        filtered_rows = [header_row]  # Include the header row
        for row in table.find_all('tr')[1:]:
            cells = row.find_all('td')
            row_data = {column_headings[i]: cells[i].get_text(strip=True) for i in range(len(cells))}
            if self.match_filter_criteria(row_data, filter_criteria, field_names):
                filtered_rows.append(row)
        
        request.session['filtered_rows'] = [str(row) for row in filtered_rows]
        request.session['column_headings'] = column_headings
        
        filtered_table = '<table style="border-collapse: collapse; border: 1px solid black;">'
        for row in filtered_rows:
            filtered_table += str(row)
        filtered_table += '</table>'
        return render(request, 'filtered_report.html', {'filtered_table': filtered_table, 'report_id': report_id})

    def match_filter_criteria(self, row_data, field_values, field_names):
        for column_heading, field_name in field_names.items():
            if field_name in field_values and field_values[field_name]:
                if row_data.get(column_heading, '').strip() != field_values[field_name].strip():
                    return False

        for custom_field_name in field_values.keys():
            if custom_field_name not in field_names.values():
                custom_field_value = field_values.get(custom_field_name, '').strip()
                if custom_field_value:
                    custom_field_value = custom_field_value.lower()
                    if custom_field_name in row_data and row_data[custom_field_name].lower() != custom_field_value:
                        return False
        return True


filter_table.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Filter Report</title>
</head>
<body>
    <h1>Filter Report</h1>
    <form method="post" action="{% url 'filter_existing_report' %}">
        {% csrf_token %}
        <input type="hidden" name="report_id" value="{{ report_id }}">
        <table>
            
            <tbody>
                <tr>
                    <td colspan="{{ selected_fields|length }}">{{ html_table|safe }}</td>
                </tr>
            </tbody>
        </table>
        <button type="submit">Filter Report</button>
    </form>
</body>
</html>


select_filter.html 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Fields and File Name</title>
    <style>
        /* CSS for styling the dropdown */
        .dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
        }

        .dropdown-content label {
            padding: 12px 16px;
            display: block;
            cursor: pointer;
        }

        .dropdown-content input[type="checkbox"] {
            margin-right: 10px;
        }

        .dropdown:hover .dropdown-content {
            display: block;
        }

        
    </style>
</head>
<body>
    <h1>Select Fields and File Name</h1>
    
    <form method="post" action="{% url 'generate_filter_table' %}">
        {% csrf_token %}
        
        <div class="dropdown">
            <button type="button" class="dropbtn">Select Fields</button>
            <div class="dropdown-content">
                <input type="hidden" name="report_id" value="{{ report_id }}">
                
                {% for field, display_name in available_fields.items %}
                    <label>
                        <input type="checkbox" name="selected_fields" value="{{ field }}" {% if field in selected_fields %}checked{% endif %}>
                        {{ display_name }}
                    </label>
                {% endfor %}
            </div>
        </div>
        <br><br>
        <button type="submit">Generate Filter Table</button>
    </form>

    <script>
        // JavaScript to handle checkbox selection within the dropdown
        const dropdown = document.querySelector('.dropdown');
        const checkboxes = dropdown.querySelectorAll('input[type="checkbox"]');
        const dropbtn = dropdown.querySelector('.dropbtn');

        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                const checkedItems = Array.from(checkboxes).filter(checkbox => checkbox.checked);
                if (checkedItems.length > 0) {
                    dropbtn.textContent = `Selected ${checkedItems.length} items`;
                } else {
                    dropbtn.textContent = 'Select Fields';
                }
            });
        });
    </script>
</body>
</html>
urls.py
    path('api/emp-report/generate_filter_table/', ReportViewset.as_view({'get': 'generate_filter_table','post': 'generate_filter_table'}), name='generate_filter_table'),   


