class EmployeeResource(resources.ModelResource):
    emp_code = fields.Field(attribute='emp_code', column_name='Employee Code')
    emp_first_name = fields.Field(attribute='emp_first_name', column_name='Employee First Name')
    emp_last_name = fields.Field(attribute='emp_last_name', column_name='Employee Last Name')
    emp_gender = fields.Field(attribute='emp_gender', column_name='Employee Gender')
    emp_date_of_birth = fields.Field(attribute='emp_date_of_birth', column_name='Employee DOB(DD/MM/YYYY)',widget=DateWidget(format='%d/%m/%Y'))
    emp_personal_email = fields.Field(attribute='emp_personal_email', column_name='Employee Personal Email ID')
    emp_company_email= fields.Field(attribute='emp_company_email', column_name='Employee Company Email ID')
    is_ess = fields.Field(attribute='is_ess', column_name='Iss ESS (True/False)')
    emp_mobile_number_1 = fields.Field(attribute='emp_mobile_number_1', column_name='Employee Personal Mob No',widget=NumericMobileNumberWidget())
    emp_mobile_number_2 = fields.Field(attribute='emp_mobile_number_2', column_name='Employee Company Mobile No',widget=NumericMobileNumberWidget())
    emp_country_id = fields.Field(attribute='emp_country_id', column_name='Employee Country Code',widget=ForeignKeyWidget(cntry_mstr, 'country_name'))
    emp_state_id = fields.Field(attribute='emp_state_id', column_name='Employee State',widget=ForeignKeyWidget(state_mstr, 'state_name'))
    emp_city = fields.Field(attribute='emp_city', column_name='Employee City')
    emp_permenent_address = fields.Field(attribute='emp_permenent_address', column_name='Employee Permanent Address')
    emp_present_address = fields.Field(attribute='emp_present_address', column_name='Employee Current Address')
    emp_status = fields.Field(attribute='emp_status', column_name='Employee Status(True/False)')
    emp_hired_date = fields.Field(attribute='emp_hired_date', column_name='Employee Joining Date(DD/MM/YYYY)')
    emp_active_date = fields.Field(attribute='emp_active_date', column_name='Employee Confirmaton Date(DD/MM/YYYY)')
    emp_relegion = fields.Field(attribute='emp_relegion', column_name='Employee Religion')
    emp_blood_group = fields.Field(attribute='emp_blood_group', column_name='Employee Blood Group')
    emp_nationality_id = fields.Field(attribute='emp_nationality_id', column_name='Employee Nationality',widget=ForeignKeyWidget(Nationality, 'N_name'))
    emp_marital_status = fields.Field(attribute='emp_marital_status', column_name='Employee Marital Status')
    emp_father_name = fields.Field(attribute='emp_father_name', column_name='Employee Father Name')
    emp_mother_name = fields.Field(attribute='emp_mother_name', column_name='Employee Mother Name')
    emp_posting_location = fields.Field(attribute='emp_posting_location', column_name='Employee Work Location')
    is_active = fields.Field(attribute='is_active', column_name='Employee Active(True/False)')
    epm_ot_applicable = fields.Field(attribute='epm_ot_applicable', column_name='Employee OT applicable(True/False)')
    emp_branch_id = fields.Field(attribute='emp_branch_id', column_name='Employee Branch Code',widget=ForeignKeyWidget(brnch_mstr, 'branch_name'))
    emp_dept_id = fields.Field(attribute='emp_dept_id', column_name='Employee Department Code',widget=ForeignKeyWidget(dept_master, 'dept_name'))
    emp_desgntn_id = fields.Field(attribute='emp_desgntn_id', column_name='Employee Designation Code',widget=ForeignKeyWidget(desgntn_master, 'desgntn_job_title'))
    emp_ctgry_id = fields.Field(attribute='emp_ctgry_id', column_name='Employee Category Code',widget=ForeignKeyWidget(ctgry_master, 'ctgry_title'))
       
    class Meta:
        model = emp_master     
        fields = (
            'emp_code',
            'emp_first_name',
            'emp_last_name',
            'emp_gender',
            'emp_date_of_birth',
            'emp_personal_email',
            'emp_company_email',
            'is_ess',
            'emp_mobile_number_1',
            'emp_mobile_number_2',
            'emp_country_id',
            'emp_state_id',
            'emp_city',
            'emp_permenent_address',
            'emp_present_address',
            'emp_status',
            'emp_hired_date',
            'emp_active_date',
            'emp_relegion',
            'emp_blood_group',
            'emp_nationality_id',
            'emp_marital_status',
            'emp_father_name',
            'emp_mother_name',
            'emp_posting_location',
            'is_active',
            'epm_ot_applicable',
            'emp_branch_id',
            'emp_dept_id',
            'emp_desgntn_id',
            'emp_ctgry_id',
        )
        import_id_fields = ()

    def before_import_row(self, row, **kwargs):
        errors = []
        login_id = row.get('Employee Code')
        mobile_number_1 = row.get('Employee Personal Mob No')
        mobile_number_2 = row.get('Employee Company Mobile No')
        personal_email = row.get('Employee Personal Email ID')
       
        
        if emp_master.objects.filter(emp_code=login_id).exists():
            errors.append(f"Duplicate value found for Employee Code: {login_id}")
               
            
        # if emp_master.objects.filter(emp_mobile_number_1=mobile_number_1).exists():
        #     errors.append(f"Duplicate value found for Employee Personal Mobile No: {mobile_number_1}")
            

        # if mobile_number_2 and emp_master.objects.filter(emp_mobile_number_2=mobile_number_2).exists():
        #     errors.append(f"Duplicate value found for Employee Personal Email ID: {mobile_number_2}")

        if emp_master.objects.filter(emp_personal_email=personal_email).exists():
            errors.append(f"Duplicate value found for Employee Personal Email ID: {personal_email}")
        
         # Validating gender field
        gender = row.get('Employee Gender')
        if gender and gender not in ['Male', 'Female', 'Other']:
            errors.append("Invalid value for Employee Gender field. Allowed values are 'Male', 'Female','Other'")
        
        mobile_number_1 = row.get('Employee Personal Mob No')
        if mobile_number_1:
            try:
                NumericMobileNumberWidget().clean(mobile_number_1)
            except ValidationError as e:
                errors.append(f"Personal Mobile No: {str(e)}")

        mobile_number_2 = row.get('Employee Company Mob No')
        if mobile_number_2:
            try:
                NumericMobileNumberWidget().clean(mobile_number_2)
            except ValidationError as e:
                errors.append(f"Company Mobile No: {str(e)}")

        # Validate date fields format
        date_fields = ['Employee DOB(DD/MM/YYYY)', 'Employee Joining Date(DD/MM/YYYY)', 'Employee Confirmaton Date(DD/MM/YYYY)']
        date_format = '%d-%m-%y'  # Format: dd-mm-yy

        for field in date_fields:
            date_value = row.get(field)
            if date_value:
                try:
                    if isinstance(date_value, datetime):  # Check if value is already a datetime object
                        date_value = date_value.strftime('%d-%m-%y')  # Convert datetime object to string
                    datetime.strptime(date_value, date_format)
                except ValueError:
                    errors.append(f"Invalid date format for {field}. Date should be in format dd-mm-yy")
            else:
                pass
                # errors.append(f"Date value for {field} is empty")
        # Validate email format
        email = row.get('Employee Personal Email ID')
        if email:
            if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
                errors.append(f"Invalid email format for Employee Personal Email ID' field:{email}")

        
        # Validating marital status field
        marital_status = row.get('Employee Marital Status')
        if marital_status and marital_status not in ['Married', 'Single', 'Divorced', 'Widow']:
            errors.append("Invalid value for marital status field. Allowed values are 'Married', 'Single', 'Divorced', 'Widow'")      

        if errors:
            raise ValidationError(errors)

class EmpCustomFieldValueResource(resources.ModelResource):
    emp_master = fields.Field(attribute='emp_master',column_name='Employee Code',widget=ForeignKeyWidget(emp_master, 'emp_code'))
    emp_custom_field = fields.Field(column_name='Field Name',attribute='emp_custom_field',widget=ForeignKeyWidget(Emp_CustomField, 'emp_custom_field'))
    field_value = fields.Field(attribute='field_value',column_name='Field Value',widget=MultiTypeWidget())

    class Meta:
        model = Emp_CustomFieldValue
        fields = ('emp_master', 'emp_custom_field', 'field_value')
        import_id_fields = ()

    # def before_import_row(self, row, row_idx=None, **kwargs):
    #     emp_code = row.get('Employee Code')
    #     field_name = row.get('Field Name')
    #     field_value = row.get('Field Value')

    #     print(f"Row {row_idx}: field_value='{field_value}'")  # Debug print statement

    #     if not emp_master.objects.filter(emp_code=emp_code).exists():
    #         raise ValidationError(f"emp_master with emp_code {emp_code} does not exist.")

    #     if not Emp_CustomField.objects.filter(emp_custom_field=field_name).exists():
    #         raise ValidationError(f"Emp_CustomField with field_name {field_name} does not exist.")

    #     custom_field = Emp_CustomField.objects.get(emp_custom_field=field_name)
        
    #     if custom_field.data_type == 'date':
    #         if isinstance(field_value, str):
    #             field_value = field_value.strip()  # Remove leading and trailing spaces
                
    #             try:
    #                 # Handle both datetime and date formats
    #                 if ' ' in field_value:  # Check if it's a datetime string
    #                     # Extract the date part (YYYY-MM-DD) and reformat it
    #                     field_value = field_value.split(' ')[0]
    #                     date_object = datetime.strptime(field_value, '%Y-%m-%d').date()
    #                     field_value = date_object.strftime('%d-%m-%Y')  # Reformat to DD-MM-YYYY
                        
    #                 # Validate date format
    #                 datetime.strptime(field_value, '%d-%m-%Y')
    #             except ValueError:
    #                 raise ValidationError(f"Invalid date format for field {field_name}. Date should be in DD-MM-YYYY format.")

    def before_import_row(self, row, row_idx=None, **kwargs):
        emp_code = row.get('Employee Code')
        field_name = row.get('Field Name')
        field_value = row.get('Field Value')

        if not emp_master.objects.filter(emp_code=emp_code).exists():
            raise ValidationError(f"emp_master with emp_code {emp_code} does not exist.")

        if not Emp_CustomField.objects.filter(emp_custom_field=field_name).exists():
            raise ValidationError(f"Emp_CustomField with field_name {field_name} does not exist.")

        custom_field = Emp_CustomField.objects.get(emp_custom_field=field_name)

        if custom_field.data_type == 'date':
            if isinstance(field_value, str):
                field_value = field_value.strip()  # Remove leading and trailing spaces
                
                # Check if the string contains time information
                if ' ' in field_value:
                    # Extract the date part (YYYY-MM-DD) from datetime string
                    field_value = field_value.split(' ')[0]
                
                try:
                    # Attempt to parse the date from the extracted or provided string
                    date_object = datetime.strptime(field_value, '%Y-%m-%d').date()
                    # Reformat to DD-MM-YYYY
                    field_value = date_object.strftime('%d-%m-%Y')
                except ValueError:
                    raise ValidationError(f"Invalid date format for field {field_name}. Date should be in DD-MM-YYYY format.")

            # Replace the original row value with the correctly formatted date
            row['Field Value'] = field_value



views.py****

class EmpbulkuploadViewSet(viewsets.ModelViewSet):
    queryset = emp_master.objects.all()
    serializer_class = EmpBulkUploadSerializer
    parser_classes = (MultiPartParser, FormParser)

    
    
    @action(detail=False, methods=['post'], parser_classes=[MultiPartParser, FormParser])
    def bulk_upload(self, request):
        if request.method == 'POST' and request.FILES.get('file'):
            excel_file = request.FILES['file']
            if excel_file.name.endswith('.xlsx'):
                try:
                    workbook = openpyxl.load_workbook(excel_file)
                    all_errors_sheet1 = []
                    all_errors_field_values = []

                    sheet1 = workbook.get_sheet_by_name('EmployeeMaster')
                    sheet2 = workbook.get_sheet_by_name('UDF')

                    if sheet1 is None or sheet1.max_row == 1:
                        return Response({"error": "Sheet1 is either missing or empty."}, status=400)

                    if sheet2 is None or sheet2.max_row == 1:
                        return Response({"error": "Sheet2 is either missing or empty."}, status=400)

                    dataset_sheet1 = Dataset()
                    dataset_sheet1.headers = [cell.value for cell in sheet1[1]]
                    for row in sheet1.iter_rows(min_row=2):
                        dataset_sheet1.append([cell.value for cell in row])

                    dataset_sheet2 = Dataset()
                    dataset_sheet2.headers = [cell.value for cell in sheet2[1]]
                    for row in sheet2.iter_rows(min_row=2):
                        dataset_sheet2.append([str(cell.value) for cell in row])

                    employee_resource = EmployeeResource()
                    custom_field_value_resource = EmpCustomFieldValueResource()

                    with transaction.atomic():
                        for row_idx, row in enumerate(dataset_sheet1.dict, start=2):
                            try:
                                employee_resource.before_import_row(row, row_idx=row_idx)
                            except ValidationError as e:
                                all_errors_sheet1.append({"row": row_idx, "error": str(e)})

                    if all_errors_sheet1:
                        return Response({"errors_sheet1": all_errors_sheet1}, status=400)

                    with transaction.atomic():
                        employee_result = employee_resource.import_data(dataset_sheet1, dry_run=False, raise_errors=True)

                    with transaction.atomic():
                        for row_idx, row in enumerate(dataset_sheet2.dict, start=2):
                            try:
                                custom_field_value_resource.before_import_row(row, row_idx=row_idx)
                            except ValidationError as e:
                                all_errors_field_values.append({"row": row_idx, "error": str(e)})

                    if all_errors_field_values:
                        return Response({"errors_field_values": all_errors_field_values}, status=400)

                    with transaction.atomic():
                        custom_field_value_result = custom_field_value_resource.import_data(dataset_sheet2, dry_run=False, raise_errors=True)

                    return Response({
                        "message": f"{employee_result.total_rows} records created for Sheet1, "
                                   f"{custom_field_value_result.total_rows} records created for Sheet2 successfully"
                    })
                except Exception as e:
                    return Response({"error": str(e)}, status=400)
            else:
                return Response({"error": "Invalid file format. Only Excel files (.xlsx) are supported."}, status=400)
        else:
            return Response({"error": "Please provide an Excel file."}, status=400)






