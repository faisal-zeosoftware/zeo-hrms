class FilteredReportData(models.Model):
    report = models.ForeignKey(Doc_Report, on_delete=models.CASCADE)
    filtered_data = models.TextField()  # Store JSON data
    created_at = models.DateTimeField(auto_now_add=True)


@action(detail=False, methods=['post'])
    def filter_by_date(self, request, *args, **kwargs):
        report_id = request.data.get('report_id')
        start_date = request.data.get('start_date')
        end_date = request.data.get('end_date')

        if not report_id or not start_date or not end_date:
            return Response({'status': 'error', 'message': 'Missing required parameters'}, status=400)

        try:
            report_instance = Doc_Report.objects.get(id=report_id)
            report_data = json.loads(report_instance.report_data.read().decode('utf-8'))
        except Doc_Report.DoesNotExist:
            return Response({'status': 'error', 'message': 'Report not found'}, status=404)

        def parse_date(date_str):
            formats = ['%d-%m-%Y', '%Y-%m-%d', '%d/%m/%Y', '%Y/%m/%d', '%d.%m.%Y', '%Y.%m.%d']
            for fmt in formats:
                try:
                    return datetime.strptime(date_str, fmt)
                except ValueError:
                    continue
            return None

        start_date = parse_date(start_date)
        end_date = parse_date(end_date)

        if not start_date or not end_date:
            return Response({
                'status': 'error', 
                'message': 'Invalid date format. Accepted formats are dd-mm-yyyy, yyyy-mm-dd, dd/mm/yyyy, yyyy/mm/dd, dd.mm.yyyy, yyyy.mm.dd.'
            }, status=400)

        date_filtered_data = [
            row for row in report_data
            if 'emp_doc_expiry_date' in row and row['emp_doc_expiry_date'] and
            parse_date(row['emp_doc_expiry_date']) and
            start_date <= parse_date(row['emp_doc_expiry_date']) <= end_date
        ]

        # Store date-filtered data in FilteredReportData model
        FilteredReportData.objects.create(
            report=report_instance,
            filtered_data=json.dumps(date_filtered_data)
        )

        return JsonResponse({
            'date_filtered_data': date_filtered_data,
            'report_id': report_id,
        })
   
    @action(detail=False, methods=['post'])
    def generate_doc_filter_table(self, request, *args, **kwargs):
        selected_fields = request.data.getlist('selected_fields', [])
        report_id = request.data.get('report_id')

        # Save selected fields to session
        request.session['selected_fields'] = selected_fields

        # Fetch date-filtered report data from session
        date_filtered_data = request.session.get('date_filtered_data', [])
        print("Previously date filtered data:", date_filtered_data)

        # If no date-filtered data, attempt to fetch full report
        if not date_filtered_data:
            try:
                report = Doc_Report.objects.get(id=report_id)
                report_content = json.loads(report.report_data.read().decode('utf-8'))
            except Doc_Report.DoesNotExist:
                return JsonResponse({'status': 'error', 'message': 'Report not found'})

            date_filtered_data = report_content

        # If no fields are selected for filtration, default to all existing fields in the report
        if not selected_fields:
            if date_filtered_data:
                selected_fields = list(date_filtered_data[0].keys())  # Default to all keys in the first record
            else:
                selected_fields = []  # No data in the report

        # Define display names for fields
        column_headings = {
            "emp_id": "Employee Code",
            "emp_first_name": "First Name",
            "emp_active_date": "Active Date",
            "emp_branch_id": "Branch",
            "emp_dept_id": "Department",
            "emp_desgntn_id": "Designation",
            "emp_ctgry_id": "Category",
            "emp_doc_type": "Document Type",
            "emp_doc_number": "Document Number",
            "emp_doc_issued_date": "Issued Date",
            "emp_doc_expiry_date": "Expiry Date",
            "is_active": "Active",
        }

        # Get unique values for selected_fields from date-filtered data
        unique_values = self.get_unique_values_for_fields(date_filtered_data, selected_fields)

        processed_unique_values = {}
        for field, values in unique_values.items():
            processed_unique_values[field] = {
                'values': values,
            }

        return JsonResponse({
            'selected_fields': selected_fields,
            'report_id': report_id,
            'report_content': date_filtered_data,  # Pass filtered data to the frontend
            'unique_values': processed_unique_values,
        })

    def get_unique_values_for_fields(self, data, selected_fields):
        unique_values = {field: set() for field in selected_fields}
        # Extract data from the provided content
        for record in data:
            for field in selected_fields:
                if field in record:
                    unique_values[field].add(record[field])

        # Convert sets to lists
        for field in unique_values:
            unique_values[field] = list(unique_values[field])
        return unique_values

    @action(detail=False, methods=['post'])
    def filter_document_report(self, request, *args, **kwargs):
        report_id = request.data.get('report_id')
        if not report_id:
            return Response({'status': 'error', 'message': 'Report ID is missing'}, status=400)

        # Fetch date-filtered data from FilteredReportData model
        try:
            filtered_data_instance = FilteredReportData.objects.filter(report_id=report_id).latest('created_at')
            filtered_data = json.loads(filtered_data_instance.filtered_data)
        except FilteredReportData.DoesNotExist:
            return Response({'status': 'error', 'message': 'No date-filtered data available'}, status=404)

        # Get selected fields and filter criteria from request
        selected_fields = [key for key in request.data.keys() if key not in ('report_id', 'csrfmiddlewaretoken')]
        print("Selected fields:", selected_fields)

        filter_criteria = {}
        for field in selected_fields:
            values = [val.strip() for val in request.data.getlist(field) if val.strip()]
            if values:
                filter_criteria[field] = values

        print("Filter criteria:", filter_criteria)  # Debugging statement

        # Apply field value filters to date-filtered data
        filtered_data = [row for row in filtered_data if self.match_filter_criteria(row, filter_criteria)]

        print("Filtered data after applying field filters:", filtered_data)  # Debugging statement

        # Save filtered data to session for Excel generation
        request.session['filtered_data'] = filtered_data
        request.session.modified = True

        return JsonResponse({
            'filtered_data': filtered_data,
            'report_id': report_id,
        })
    def match_filter_criteria(self, row_data, filter_criteria):
        for field, values in filter_criteria.items():
            row_value = row_data.get(field, '').strip() if row_data.get(field) else ''
            print(f"Checking field {field} with values {values} against row value {row_value}")  # Debugging statement
            if row_value not in values:
                return False
        return True